<nav id="navbar">
  <header>JS Documentation</header>
  <ul>
    <li><a class="nav-link" href="#Introduction">Introduction</a></li>
    <li>
      <a class="nav-link" href="#JavaScript_and_Java">JavaScript and Java</a>
    </li>
    <li><a class="nav-link" href="#Hello_world">Hello world</a></li>
    <li><a class="nav-link" href="#Variables">Variables</a></li>
    <li><a class="nav-link" href="#Constants">Constants</a></li>
    <li><a class="nav-link" href="#Data_types">Data types</a></li>
    <li><a class="nav-link" href="#Reference">Reference</a></li>
  </ul>
</nav>
<main id="main-doc">
  <section class="main-section" id="Introduction">
    <header>Introduction</header>
    <article>
      <p>
        JavaScript is the programming language of HTML and the Web.

JavaScript is easy to learn.

This tutorial will teach you JavaScript from basic to advanced.
        Web pages are not the only place where JavaScript is used. Many desktop and server programs use JavaScript. Node.js is the best known. Some databases, like MongoDB and CouchDB, also use JavaScript as their programming language.
      </p>

      <p>
        JavaScript and Java are completely different languages, both in concept and design.

JavaScript was invented by Brendan Eich in 1995, and became an ECMA standard in 1997.
ECMA-262 is the official name of the standard. ECMAScript is the official name of the language. Core JavaScript can be extended for a
        variety of purposes by supplementing it with additional objects; for
        example:
      </p>
      <ul>
        <li>
          Client-side JavaScript extends the core language by supplying objects
          to control a browser and its Document Object Model (DOM). For example,
          client-side extensions allow an application to place elements on an
          HTML form and respond to user events such as mouse clicks, form input,
          and page navigation.
        </li>
        <li>
          Server-side JavaScript extends the core language by supplying objects
          relevant to running JavaScript on a server. For example, server-side
          extensions allow an application to communicate with a database,
          provide continuity of information from one invocation to another of
          the application, or perform file manipulations on a server.
        </li>
      </ul>
    </article>
  </section>
  
  <section class="main-section" id="JavaScript_and_Java">
    <header>JavaScript and Java</header>
    <article>
      <p>
        Both Java and JavaScript are written, assembled and executed differently, and each has dramatic differences when it comes to what it is capable of doing.
      </p>

      <p>
        Java is used in a wide range of places, including Android apps, credit card programming and in the creation of desktop applications and web enterprise applications. By comparison, JavaScript is mainly used to make web pages more interactive. It can be used as an alternative to Flash, though most programmers will tell you that JavaScript is more popular and has more functionality than Flash. JavaScript can be used to do neat things like creating animation in HTML.</p>
    </article>
  </section>
  <section class="main-section" id="Hello_world">
    <header>Hello world</header>
    <article>
      To get started with writing JavaScript, open the Scratchpad and write your
      first "Hello world" JavaScript code:
      <code
        >function greetMe(yourName) { alert("Hello " + yourName); }
        greetMe("World");
      </code>

      Select the code in the pad and hit Ctrl+R to watch it unfold in your
      browser!
    </article>
  </section>
  <section class="main-section" id="Variables">
    <header>Variables</header>
    <p>
    JavaScript variables are containers for storing data values.
    </p>
    <p>
      A JavaScript identifier must start with a letter, underscore (_), or
      dollar sign ($); subsequent characters can also be digits (0-9). Because
      JavaScript is case sensitive, letters include the characters "A" through
      "Z" (uppercase) and the characters "a" through "z" (lowercase).
    </p>
    <p>
      You can use ISO 8859-1 or Unicode letters such as å and ü in identifiers.
      You can also use the Unicode escape sequences as characters in
      identifiers. Some examples of legal names are Number_hits, temp99, and
      _name.
    </p>
  </section>
  <section class="main-section" id="Constants">
    <header>Constants</header>
    <article>
      <p>
        You can create a read-only, named constant with the const keyword. The
        syntax of a constant identifier is the same as for a variable
        identifier: it must start with a letter, underscore or dollar sign and
        can contain alphabetic, numeric, or underscore characters.
      </p>

      <code>const PI = 3.14;</code>
      <p>
        A constant cannot change value through assignment or be re-declared
        while the script is running. It has to be initialized to a value.
      </p>

      <p>
        The scope rules for constants are the same as those for let block scope
        variables. If the const keyword is omitted, the identifier is assumed to
        represent a variable.
      </p>

      <p>
        You cannot declare a constant with the same name as a function or
        variable in the same scope. For example:
      </p>

      <code
        >// THIS WILL CAUSE AN ERROR function f() {}; const f = 5; // THIS WILL
        CAUSE AN ERROR ALSO function f() { const g = 5; var g; //statements
        }</code
      >
      However, object attributes are not protected, so the following statement
      is executed without problems.
      <code
        >const MY_OBJECT = {"key": "value"}; MY_OBJECT.key = "otherValue";</code
      >
    </article>
  </section>
  <section class="main-section" id="Data_types">
    <header>Data types</header>
    <article>
      <p>JavaScript variables can hold many data types: numbers, strings, objects and more:</p>
      <ul>
        <li>
          <p>Six data types that are primitives:</p>
          <ul>
            <li>Boolean. true and false.</li>
            <li>
              null. A special keyword denoting a null value. Because JavaScript
              is case-sensitive, null is not the same as Null, NULL, or any
              other variant.
            </li>
            <li>undefined. A top-level property whose value is undefined.</li>
            <li>Number. 42 or 3.14159.</li>
            <li>String. "Howdy"</li>
            <li>
              Symbol (new in ECMAScript 2015). A data type whose instances are
              unique and immutable.
            </li>
          </ul>
        </li>

        <li>and Object</li>
      </ul>
      Although these data types are a relatively small amount, they enable you
      to perform useful functions with your applications. Objects and functions
      are the other fundamental elements in the language. You can think of
      objects as named containers for values, and functions as procedures that
      your application can perform.
    </article>
  </section>
  <section class="main-section" id="Reference">
    <header>Reference</header>
    <article>
      <ul>
        <li>
          All the documentation in this page is taken from
          <a
            href="https://www.w3schools.com/js/default.asp"
            target="_blank"
            >W3Schools</a
          >
        </li>
      </ul>
    </article>
  </section>
</main>
